- Find the formula used in the Madden Amp source to calculate the breakdown of a player's salary 
into the individual years.
    
    *** There is just a numeric formula, and it relies upon PTSA (Total Salary), PVSB 
    (Signing Bonus), PCON (Contract Length), and PCYL (Contract Years Left). Don't need to worry 
    about it. Just set those fields and let the game figure out the breakdown.

- Check on the PVTS field (col CV). See if it always matches the value in PTSA.
    
    *** It does. At least in the default roster.    ***

- Find out what the other values of Player Role (PROL and PRL2) mean.
    
    *** Done.   ***

- Fill out the lists of other field values using in-game examples.
    
    *** Done.   ***

- List all of the fields that I will be setting from the PLAY table in the 'Methods for Setting 
Field Values' Excel file, and give descriptions of how I intend to set the value for the field. 
Descriptions can be sentences, mathematical formulae, or pseudo-code.
    
    *** Done.   ***

- Make a Git repo of the code, and keep old backups in a separate folder, with new backups being 
made only once in a while off a revision from Git.
    
    *** Done.   ***

- Finish writing the Scrapy script that will create "My %d NFL Rosters.csv" for use in the final 
"step_5_update_roster_file.py" script.
    
    *** Done.   ***

- Figure out:
    1) if I can currently scrape NFL.com to get the first part of the intermediate output 
    file "NFL Rosters.csv" made.
        - YES! I can make the file, without FBGratings input.
        
    2) if and how I can get one player's record updated so it will be usable in-game.
        
        a) Determine what DLLtest2.py, DLLtest3.py, read_tables.py, 
        step_3_scrape_NFL_rosters.py, and step_5_update_roster_file.py do now, and what 
        use I have for them.
        
            dump_roster_to_csv.py: This is the file I use to read all of the player 
            records out of the file '...\process\inputs\base.ros' and create the CSV file 
            "current_players.csv" listing them. NOW FIXED FOR PYTHON 3 AND WORKING.
            
            DLLtest3.py: This file reads the first dict of player attributes from 
            "process\inputs\Latest Madden Ratings.csv" and then uses some of those values 
            in combination with some hardcoded values to alter the first player record in 
            "process\inputs\base.ros", making him into a WR. NOW FIXED FOR PYTHON 3 AND 
            WORKING.
            
            read_tables.py: Just reads the properties of all the tables and then loops 
            through them and reads all the properties of all of their fields.
            NO LONGER NEEDED. ALL FUNCTIONALITY FROM THIS CODE IS IN OTHER FILES AS WELL.
            REMOVING.
            
            step_3_scrape_NFL_rosters.py: This file currently uses Scrapy to get the basic 
            info on players from the rosters at NFL.com and write that into the file at 
            "...\process\outputs\NFL rosters.csv". It is set up right now to only 
            go through the Buffalo Bills roster. NOW FIXED FOR PYTHON 3 AND WORKING.
            
            step_5_update_roster_file.py: This file currently edits the first name (PFNA) 
            field of the first player in the roster located at 
            "...\process\inputs\base.ros". NOW FIXED FOR PYTHON 3 AND WORKING.
            
    *** Done. ***

- Uncomment more fields to expand items.py 
    
    *** DONE. ***

- Alter the name of the intermediate output file from "NFL rosters.csv" to a formatted 
name, like "My %d NFL Rosters.csv" so I can more easily keep multiple years.
    
    *** Done. ***

- Finish coding "nfl_spider.py". This file will read in the contents of "Latest Madden 
Ratings.csv", scrape the player profile pages on NFL.com, and then use both in formulating 
the values to put into the player's fields when creating "My xxxx NFL Rosters.csv". Use 
the Bears to work out the matching of player names between the Madden and NFL files.
    - Take code from old nfl_spider.py on github and other code from DLLtest3.py
    
    *** Done. ***

- Test the code for step_3_ to see how it deals with a player that does not have a jersey 
number on NFL.com
    
    *** Done. - It just puts a blank field into the output CSV file. *** 

- Add code to scraping/spiders/nfl_spider.py (step 3) that will scrape 
"https://overthecap.com/contracts" to get links to each player's contract page, for setting the 
fields "total_salary", "signing_bonus", "draft_pick", "draft_round", "years_pro" [determined from 
year (un)drafted], "contract_length", "years_left".
    
    *** Done.    ***

- Add logic to the get_first/last_name functions to replace unicode in names with regular 
single quote; etc. 
    
    *** Not necessary.    ***

- Write up further instructions for future runs of the updating process, including more details 
on the actions needed for step 3, such as iterating over the run of step_3_scrape_NFL_rosters.py 
by altering code in process\scraping\settings.py to set the LOG_LEVEL to "INFO" first, then 
"WARNING", and finally "ERROR" (and only if absolutely necessary, DEBUG), while choosing which 
new players not found in the "Latest Madden Ratings.csv" to add or skip.
    
    *** Done.    ***

- Figure out whether or not to alter field values from the 2017 Madden ratings file, 
specifically the amounts for Total Salary and Signing Bonus. (Maybe lower them each by a 
certain percentage, to account for inflation today?)
    
    *** Done.    ***
    

- Write the rest of "step_5_update_roster_file.py" according to the outline in "Methods for 
Setting Field Values.xlsx". Separate out each position into its own Python module, kept in the 
'utilities' folder.
    
    ***	DONE ***
    
- Figure out how to put the venv folder I will make (E:\Gaming\madden_08_updater\venv\) into the .gitignore.
    
    *** Done.    ***

- Install Scrapy into \venv.
    
    *** Done.    ***

- Add in code to scraping/spiders/nfl_spider.py that will open the previous year's final ratings file (which should 
always be found in "process\inputs\step3\Previous Player Attributes.csv") alongside the "Latest Madden Ratings.csv" so 
we can pull in players' info on skin color, hair color, etc. to include in the Step 3 output file for this year.
    
    *** DONE.    ***
    
- Add code to each of the _[position] helper functions that generates weighted pseudo-random values for player 
attributes when the attributes were not present in the "Current Player Attributes.csv" file used in step 5.
    
    *** DONE.    ***
    
- Write a script to add missing draft and contract info. Draft is easy - just use round 15, pick 63 (undrafted). For 
missing contract info, write code that will read in the file "My 20[XX] Player Attributes - In Progress 
20[XX]_MM_DD.csv" [sorted by position, then by overall rating] TWICE - the first time, to put the two pairings of 
(overall rating, yearly salary) and (overall rating, signing bonus) into four lists and use those lists to feed into 
scipy's curve_fit to generate two arrays (which we convert to lists) of the a, b, and c parameters for defining a 
function which will, in turn, allow us to input one overall rating at a time and receive a value which we can then 
modify within 2 standard deviations (to randomize it a bit more) and serve as the salary / signing bonus for a player. 
The file will then be read in a second time, and each player without contract info will get a slightly randomized 
value for their per-year-salary, a reasonable number of years on the contract (taking into account their no. of years 
pro), the number of years left on the contract (again, taking into account their no. of years pro), and their signing 
bonus figure. The new record with those values is then written to the "Added Contract Info - My 20[XX] Player 
Attributes - In Progress 20[XX]_MM_DD.csv" file.
    
    *** DONE, sort of. Not going to write anything for missing contract info. Got far along the path and then, seeing 
    the output of the curve_fit() method, realized that this would always result in reasonable output, for several 
    reasons (mostly, too small sample size input for salaries by position, and too many fluctuations and outliers.)
    For missing contract info, I'm best served just coming up with reasonable values myself.
    ***
    
- Fill out the latest "My 2019 Player Attributes ... " file to reach the desired numbers of players at each position, 
according to the "Player Target Numbers by Position.xlsx" file in "docs\My Ratings\2019".
    
    ***   DONE.   ***
    
- Update (and document) the factors used to translate current 2019 salaries and bonuses to 2008 money.
    
    ***   DONE.   ***
    
- Put a copy of "My 2019 Player Attributes - FINAL 2019_MM_DD.csv" into "process\inputs\step5" as "Current Player 
Attributes.csv" for repeated testing of step_5. Then open that up and erase all of the player attributes so everything 
that can be randomly generated is. Go into the folder "docs\Testing\2019" and open the file "Randomly Generated 
Overall Ratings Distribution.xlsx" to document results of repeated testing of step_5 (followed by the dump utility) to 
see what kinds of ratings are generated and if any final tweaks to any of the positional generators are needed.
    
    ***   IN PROGRESS   ***
    
