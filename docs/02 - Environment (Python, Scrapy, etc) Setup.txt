LATEST SETUP:

2017_11_07:
I am starting over (in a sense) once again with my Madden Updater, and now, Scrapy's documentation 
says that it supports Python 2.7 AND Python 3.3+, so I will attempt to install and use Python 3.

- Since Scrapy recommends installing either Anaconda or Miniconda first, I looked at the docs for 
those packages, which say "The fastest way to obtain conda is to install Miniconda, a mini version 
of Anaconda that includes only conda and its dependencies. If you prefer to have conda plus over 
720 open source packages, install Anaconda." Uh, I'll take Miniconda, thanks.

NOTE: (Ana)conda is a full package manager, which installs Python as well as all sorts of other 
Python libraries/packages. So you DO NOT need to download Python itself from python.org first. 
JUST download Miniconda and it will download and install the latest Python with it. (Even this 
installation of Python doesn't seem really necessary, as I will be making an environment for each 
Python project I work on, like one for my 'madden_08_updater'. Each environment will have its own 
set of dependencies, listed in a .yml file, which is how conda manages envs.)

- Downloaded Miniconda's 32 bit installer for Windows and installed it. I put it into 
"C:\Miniconda3".

- (Uninstalled the stand-alone version of Python 3.6.3 which I had installed before I understood 
what conda is exactly.)

- Added 'C:\Miniconda3', 'C:\Miniconda3\Library\mingw-w64\bin', 'C:\Miniconda3\Library\usr\bin', 
'C:\Miniconda3\Library\bin', and 'C:\Miniconda3\Scripts' to my system's environment PATH.
    - Went to Control Panel; searched for 'path'; opened link to 'Edit the system environment 
    variables'; clicked 'Environment Variables...' at the bottom; double-clicked 'Path' in the 
    bottom section, 'System variables' (not the top, 'User variables').
    - Yes, there are no folders 'mingw-64' or 'usr' in 'C:\Miniconda3\Library\', but those paths 
    were added by the installer when I checked the 'Not Recommended' box to add Miniconda to the 
    Path during my installation on my work laptop, so I added them at home as well. Shouldn't hurt 
    anything. Maybe those folders will get added as envs are created? Who knows.

- I realized that I just needed to create a conda env for my Madden Git repo (madden_08_updater), 
which lives in my Working Files (red) USB thumb drive. So, I started by following the 'Getting 
Started' guide on the Conda documentation site.
    - Verified that conda is installed:
        > conda --version
        conda 4.3.27
    - Updated conda:
        > conda update conda
        The following packages will be UPDATED:
        conda: 4.3.27-py36h94e4195_0 --> 4.3.30-py36h404fb56_0
        Proceed ([y]/n)? y
        conda-4.3.30-p 100% |###############################| Time: 0:00:00   4.25 MB/s
    - Created a (test) environment with conda create:
        > conda create --name testing biopython
        Fetching package metadata .............
        Solving package specifications: .
        Package plan for installation in environment C:\Miniconda3\envs\testing:
        ...
    - Activated 'testing' environment:
        > activate testing
        (testing) C:\Users\spalding>
    - Created a new environment which installed a different version of Python, along with 2 
    packages named Astroid and Babel:
        > conda create -n bunnies python=3.5 astroid babel
        Fetching package metadata .............
        Solving package specifications: .
        Package plan for installation in environment C:\Miniconda3\envs\bunnies:
        ...
    - Displayed the environments I installed so far:
        > conda info --envs
        # conda environments:
        #
        bunnies                  C:\Miniconda3\envs\bunnies
        testing               *  C:\Miniconda3\envs\testing
        root                     C:\Miniconda3
    - Switched to the 'bunnies' environment:
        > activate bunnies
        (bunnies) C:\Users\spalding>
    - Deactivated the active env (going back to the 'root' env):
        > deactivate
        >
    - Deleted the 'bunnies' environment:
        > conda remove -n bunnies --all
        Package plan for package removal in environment C:\Miniconda3\envs\bunnies:
        The following packages will be REMOVED:
            astroid:           1.5.3-py35h17c8c86_0
            babel:             2.5.0-py35h7703712_0
            ...
        Proceed ([y]/n)? y
    - Verified that the 'bunnies' env was removed:
        > conda info --envs
        C:\Users\spalding>conda info --envs
        # conda environments:
        #
        testing                  C:\Miniconda3\envs\testing
        root                  *  C:\Miniconda3
    - Also removed the 'testing' env:
        > conda remove -n testing --all

- Now what I wanted to do was to create an env called 'madden_08_updater' with Python 3.6.* and 
Scrapy 1.4.*. To do this, I first needed to tell conda about the conda-forge channel:
    > conda config --add channels conda-forge
    
- Now, I could create the env with Scrapy, so I ran:
    > conda create -n madden_08_updater python=3.6 scrapy=1.4
    
    Package plan for installation in environment C:\Miniconda3\envs\madden_08_updater:
    
    The following NEW packages will be INSTALLED:
        appdirs:          1.4.3-py_0            conda-forge
        asn1crypto:       0.22.0-py36_0         conda-forge
        attrs:            17.2.0-py36_0         conda-forge
        automat:          0.6.0-py36_0          conda-forge
        ca-certificates:  2017.7.27.1-0         conda-forge
        certifi:          2017.7.27.1-py36_0    conda-forge
        cffi:             1.10.0-py36_0         conda-forge
        constantly:       15.1.0-py_0           conda-forge
        cryptography:     2.0.3-py36_0          conda-forge
        cssselect:        1.0.1-py_0            conda-forge
        hyperlink:        17.3.1-py_0           conda-forge
        hypothesis:       3.23.0-py36_0         conda-forge
        idna:             2.6-py36_1            conda-forge
        incremental:      17.5.0-py_0           conda-forge
        libiconv:         1.14-vc14_4           conda-forge [vc14]
        libxml2:          2.9.5-vc14_1          conda-forge [vc14]
        libxslt:          1.1.29-vc14_5         conda-forge [vc14]
        lxml:             4.1.1-py36_0          conda-forge
        openssl:          1.0.2l-vc14_0         conda-forge [vc14]
        parsel:           1.2.0-py36_0
        pip:              9.0.1-py36_0          conda-forge
        pyasn1:           0.3.7-py_0            conda-forge
        pyasn1-modules:   0.1.5-py_0            conda-forge
        pycparser:        2.18-py36_0           conda-forge
        pydispatcher:     2.0.5-py36_0          conda-forge
        pympler:          0.5-py36_0            conda-forge
        pyopenssl:        17.2.0-py36_0         conda-forge
        python:           3.6.3-1               conda-forge
        pywin32:          220-py36_1            conda-forge
        queuelib:         1.4.2-py36_0
        scrapy:           1.4.0-py36_0          conda-forge
        service_identity: 17.0.0-py36_0
        setuptools:       36.6.0-py36_1         conda-forge
        six:              1.11.0-py36_1         conda-forge
        twisted:          17.9.0-py36h25c7a4d_0
        vc:               14-0                  conda-forge
        vs2015_runtime:   14.0.25420-0          conda-forge
        w3lib:            1.18.0-py36h709147c_0
        wheel:            0.30.0-py_1           conda-forge
        wincertstore:     0.2-py36_0            conda-forge
        zlib:             1.2.11-vc14_0         conda-forge [vc14]
        zope:             1.0-py36_0
        zope.interface:   4.4.3-py36h0e06f40_0
        
    Proceed ([y]/n)? y
    
- This proceeded to install all of the above packages into C:\Miniconda3\envs\madden_08_updater.
I checked after the installation, and it appeared to have installed correctly.

- Having created an env from a simple 'conda create ...' command, I wanted to see if my 
assumptions about how the environment's YML configuration file would look were correct. So I ran: 
    > conda env export > environment.yml
to create the 'environment.yml' file, and it created the file (though it created it in the current 
directory I was in for the CMD window, not in the Madden env itself.) Turned out that the file 
contained what I had expected to be in there, and then some. It added "- defaults" under 
"channels:"; it listed ALL of the package dependencies that Scrapy needed (with additional params 
following each one; for example, Python was listed as "- python=3.6.3=1"; I don't know why the 
'=1' is added); it had the 'service_identity' package listed as: 
    - pip:
        - service-identity==17.0.0
and on the very last line, it said:
    prefix: C:\Miniconda3\envs\madden_08_updater
(I was concerned that this 'prefix' might preclude using this file to create an ENV on systems 
where Miniconda was not in C:\, but according to StackOverflow, conda ignores that line when 
creating a new env from an 'environment.yml' file.)

- I then copied that 'environment.yml' file from 'C:\Users\spalding' into my USB thumb drive, at 
the 'Gaming\madden_08_updater' folder.

- Transferring my development from my work laptop to my home desktop, I made sure that I had the 
folders for Miniconda in the PC's environment path. Then I simply opened a CMD window, changed to 
the USB flash drive (just typed "G:" to change in CMD), then 'cd G:\Gaming\madden_08_updater', and 
ran:
    > conda env create -f environment.yml

- This command fetched the necessary packages and installed them (without confirmation first). The 
packages were not installed in alphabetical order (as they had been listed during the first 
installation above), but I'm guessing they were installed in order of prerequisites. The process 
also gave some output stating that some requirements were 'already satisfied', but I assume those 
were simply the result of installing some packages that shared requirements with others. 

- After doing the 'activate madden_08_updater', I was able to find Scrapy with:
    > where scrapy
    C:\Miniconda3\envs\madden_08_updater\Scripts\scrapy.exe

- I then immediately cd'd into the 'G:\Gaming\madden_08_updater\process' folder and attempted to 
run 'python step_3_scrape_NFL_rosters.py'. This gave me an error:
    File "G:\Gaming\madden_08_updater\process\scraping\spiders\nfl_spider.py", line 57, in __init__
        for placeholder, value in dictTeamInfo.iteritems():
    AttributeError: 'dict' object has no attribute 'iteritems'
    Starting our crawl...
    Crawling stopped.

- I googled this, thinking it must be related to the move from Python 2 to 3, and confirmed that 
the 'iteritems' attribute of dicts was removed in 3. I needed to change all dict 'iter*' attribute 
references to just the later part of the attribute's name (eg. '.iteritems()' to '.items()'). I 
made the change (finding only the one instance) and tried the command 
    > python step_3_scrape_NFL_rosters.py
again.

- This time, I got an error that appeared to be a problem with the CSV output writer:
    File "G:\Gaming\madden_08_updater\process\scraping\pipelines.py", line 45, in __init__
        self.writerPlayerAttributeDicts.writeheader()
    File "C:\Miniconda3\envs\madden_08_updater\lib\csv.py", line 144, in writeheader
        self.writerow(header)
    File "C:\Miniconda3\envs\madden_08_updater\lib\csv.py", line 155, in writerow
        return self.writer.writerow(self._dict_to_list(rowdict))
    TypeError: a bytes-like object is required, not 'str'
The solution (Thanks, StackOverflow - as usual) seemed to be to change how I opened the file to 
which I was attempting to write. In Python 2, I could open a file with 'wb', but in 3 I would need 
to open it as a textfile instead. So I replaced 'wb' with just 'w' and tried again.

- This time... success! I got an output file 'NFL rosters.csv' at 
'G:\Gaming\madden_08_updater\process\outputs'. Although, it seemed to get a 404 on one player's 
page, for no apparent reason. I even tried the URL for his page afterwards, and it was there. So, 
running it yet again, I got the full 57 players. Not sure what happened the first time, but hey, 
I'll take it. My setup seems to be working again :^)

===================================================================================================
OLDER NOTES: 

To setup the necessary environment for running my Python code against Scrapy, I looked at what I 
had done previously, when I tried to install two versions of Python (one of 2.x and one of 3.x) 
alongside each other. That attempt had resulted in problems with running Python, so I had already 
uninstalled both versions of Python from the "C:\Program Files (x86)" directory, and started an 
attempt to reinstall them into their own top level folders, C:\Python2-7-12 and C:\Python3-5-2.

I had started with Python 3.5.2, and at the time I began my latest attempt, that version was the 
only one of the two installed. However, since I still can not find any documents stating that 
Scrapy is compatible with Python 3.x on Windows, I decided to completely uninstall Python 3.5.2 
from my Windows machine and ONLY install Python 2.7.x (2.7.13 then being the current version).

1) To start my latest attempt to get Scrapy running, I went to the Settings panel and uninstalled 
Python 3.5.2 using the Uninstall button under 'Apps & features'. This prompted me with the 
uninstallation wizard, from which I chose "Completely Uninstall" or whatever it actuall said (as 
opposed to Change or Configure an Existing Install). After it ran, the folder "C:\Python3-5-2" was 
completely empty, so I deleted it.

2) I then created the folder "C:\Python2-7-13" and ran the installer for 32-bit Python 2.7.13, 
which I had downloaded from the Python website. I also checked 'Add python to PATH', so the EXE 
for python is on the Windows path.

3) Now to install Scrapy! I opened an ADMIN GitBash window and typed:
    $ which pip
which said:
    /c/Python2-7-13/Scripts/pip
So, since it knew about pip, I did:
    $ pip install scrapy
It collected the required packages, tried installing things, and errored out. It said, in part, 
    ...
    running build_ext
    error: Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpython27
    ...
    Command "c:\python2-7-13\python.exe -u -c "import setuptools,  ...   --compile" failed with 
    error code 1 in c:\users\spalding\appdata\local\temp\pip-build-8he85n\Twisted\
    
4) SO, to fix this error, I went to the website mentioned in the first error message. Ran the 
downloaded MSI. No options, just accept the ToU and install. It seemed to work. (No completion 
message either.) So I tried this again:
    $ pip install scrapy
    
5) Seeing that this is a familiar tune (see previous attempt, below), I went with the file from 
http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml again (this time, using the file named:
lxml-3.7.2-cp27-cp27m-win32.whl, which looked like the only version there now for Python 2.7).
That is, in the ADMIN GitBash, I cd'd to the downloads folder (cd /c/Users/spalding/Downloads/), 
and did:
    $ pip install lxml-3.7.2-cp27-cp27m-win32.whl
    
6) This seemed to work. ("...Successfully installed lxml-3.7.2"). SO now I again tried to:
    $ pip install scrapy
in the ADMIN GitBash window, and... It seemed to work!! To check, I did:
    $ which scrapy
which said: 
    /c/Python2-7-13/Scripts/scrapy

7) Huzzah! Now, I tried to run the Scrapy script (after a few modifications because FBGratings.com 
is no more...), and I got an error about missing win32api:
    ImportError: No module named win32api
    Starting our crawl...
    Crawling stopped.
    
8) I Googled "python no module named win32api" and found suggestions to install it using:
    pip install pypiwin32
Feeling adventurous (and ignoring my documentation of a previous installation of win32api below), 
I went ahead and tried that command. It told me:
    Collecting pypiwin32
    Downloading pypiwin32-219-cp27-none-win32.whl (6.7MB)
    Installing collected packages: pypiwin32
    Successfully installed pypiwin32-219

9) Thinking that this was a success, I tried the "python step_3_scrape_NFL_rosters.py" command 
once more, and got this:
    2017-02-20 14:45:37 [scrapy.utils.log] INFO: Scrapy 1.3.2 started (bot: scripted_bot)
    ...
    2017-02-20 14:45:43 [scrapy.statscollectors] INFO: Dumping Scrapy stats:
    {'downloader/request_bytes': 25569,
    'downloader/request_count': 77,
    'downloader/request_method_count/GET': 77,
    'downloader/response_bytes': 1725915,
    'downloader/response_count': 77,
    'downloader/response_status_count/200': 77,
    'finish_reason': 'finished',
    'finish_time': datetime.datetime(2017, 2, 20, 19, 45, 43, 236000),
    'item_scraped_count': 76,
    'log_count/INFO': 7,
    'request_depth_max': 1,
    'response_received_count': 77,
    'scheduler/dequeued': 77,
    'scheduler/dequeued/memory': 77,
    'scheduler/enqueued': 77,
    'scheduler/enqueued/memory': 77,
    'start_time': datetime.datetime(2017, 2, 20, 19, 45, 37, 481000)
    2017-02-20 14:45:43 [scrapy.core.engine] INFO: Spider closed (finished)
    Starting our crawl...
    Crawling stopped.
    
10) This seemed very good indeed. It looked like I have found 76 items to scrape. I checked the 
output folder (C:\Home\Working Files\madden_08_updater\process\outputs), but the file was not 
there. Since I had not specified the output directory when I created the file, it was placed in 
directory from which I ran the script, C:\Home\Working Files\madden_08_updater\process. The file 
did have 76 players in it, all with their names and other attributes correctly in place. 

11) On to develop the rest of the scripts!!

----- DOCUMENTATION OF MY PREVIOUS ATTEMPT TO INSTALL Python 3.x and Python 2.x side-by-side. -----

1) Install a version of Python that Scrapy supports. Currently, it does not support 3.x, so try 
2.7.x.
    
    - Go to: https://www.python.org/downloads/ .
    (As of the time of writing these setup notes, 2.7.12 was the latest available release.)
    
    - Make sure to have the python executable paths added to the system environment variable PATH.
    (In 2.7.12, it gives the option of having the installer do this, though it is not selected by 
    deafult, so I selected it. I also unselected the option for Register Extensions, which would  
    have made 2.7.12 the default Python installation.)
    
    - Since I already had Python 3.5.2 installed and on the PATH, I needed to resolve the conflict 
    between the two versions. At first, I renamed the two EXEs from python.exe to python2.exe and 
    python3.exe, as well as removing two of the pip files from each installation's "Scripts" 
    directory, leaving only the files "pip2.exe" and "pip3.exe". However, this made both of the 
    pip versions not work right, as I suppose they look for the file "python.exe" in their parent 
    directory, and they could no longer find them. So, I renamed the files back to "python.exe", 
    and then I did two things to resolve the PATH conflict
    
        - First, I made symbolic links to the two "python.exe" files in a new folder I made, 
        "C:\python_links", by opening a command prompt WITH ADMIN PRIVS (NOT GitBash) and typing:
            C:\Users\spalding> cd C:\python_links
            C:\python_links> mklink python2.exe "C:\Program Files (x86)\Python2-7-12\python.exe"
            C:\python_links> mklink python3.exe "C:\Program Files (x86)\Python35-32\python.exe"
        
        - Then I removed "C:\Program Files (x86)\Python2-7-12\;" and 
        "C:\Program Files (x86)\Python35-32\;" from the System PATH, and added "C:\python_links\;".
    
    
2) Install the right pywin32 version (in this case, latest build (220), 32 bit, for python 2.7).
    
    - Check which bitness of python has been installed. Open the Python shell GUI (IDLE) and type:
        >>> import platform
        >>> platform.architecture()
    This should report:
        ('32bit', 'WindowsPE')
    
    - Go to: http://sourceforge.net/projects/pywin32/files/pywin32/ .
    
    - Download and then install the right installer, in this case "pywin32-220.win32-py2.7.exe".
    
3) Finally, install Scrapy.
    
    Open an ADMIN GitBash window and type:
        $ pip2 install scrapy
    This should have installed scrapy and any requirements. However, since things are shit, it 
    failed, with the error message: 
        error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from 
        http://aka.ms/vcpython27
        
    So, I went to the site (which redirected me to an official Microsoft site) and downloaded and 
    installed the MS Visual C++ Compiler Package for Python 2.7. THEN, I tried the pip install of 
    scrapy again, and this time... it errored out. On lxml. Saying:
        ERROR: 'xslt-config' is not recognized as an internal or external command,
        operable program or batch file.
    
        ** make sure the development packages of libxml2 and libxslt are installed **
        
    SO, I tried:
        pip2 install lxml
        
    And this errored out the same way. SO... I googled the error "'xslt-config' is not recognized 
    as an internal or external command", and found a StackOverflow page telling me to go get a 
    wheel file (.whl) for installing lxml, found on the site of some dude named Christoph Gohlke. 
    Seemed a bit shady, but what the hey. I downloaded the file "lxml-3.6.4-cp27-cp27m-win32.whl" 
    and opened an ADMIN command prompt, cd'd to the downloads folder (C:\Users\spalding\Downloads), 
    and did:
        C:\Users\spalding\Downloads> pip2 install lxml-3.6.4-cp27-cp27m-win32.whl
        
    This seemed to work. ("...Successfully installed lxml-3.6.4"). SO now I again tried to:
        
        $ pip2 install scrapy
        
    in an ADMIN GitBash window, and... It seemed to work. However, I am still having all sorts of 
    problems running python2/python3 from the command line. I'm scrapping the current installs of 
    Python 2 AND Python 3, since they are both installed under "C:\Program Files (x86)", which is a 
    restricted location and causes problems with installations, etc. I'm going to delete them BOTH 
    and re-install them into:
        
        C:\Python2-7-12
        
        and
        
        C:\Python3-5-2
        
4) Ok. So, I deleted both versions of Python using the Add/Remove Programs links, and started the 
    re-install with Python 3.5.2. In the Setup wizard, I chose Customize Installation, then left 
    the boxes checked to include the Documentation, pip, tcl/tk & IDLE, Python test suite, and the 
    py launcher, for all users. In Advanced Options, I left "Associate files with Python" checked, 
    unchecked "Create shortcuts for installed applications", then also checked "Install for all 
    users" (which automatically checked "Precompile standard library") and "Add Python to 
    environment variables". Finally, I chose the new location (C:\Python3-5-2) and let her rip.
    
5) Now, on to Python 2.7.12. I created the new folder at C:\Python2-7-12. 

